openapi: 3.0.0
info:
  version: 1.0.0
  title: Bus-Booking-application
  description: This our bus-booking application

  contact:
    name: Mehedi Hasan
    email: 126mehedi@gmail.com
    url: http://example.com
servers:
  - description: development
    url: http://localhost:8000/api/v1
tags:
  - name: Auth
    description: This is only for authentication (public)
  - name: User
    description: This is only for user related (privet)
  - name: Bus
    description: This is only for Bus related api endpoing (privet)
  - name: Booking
    description: This is only for booknig related api endpoint (privet)
  - name: Review
    description: This is only for reviewing a bus related api endpoint (privet)
  - name: Stopes
    description: This is for a bus stopes related route will.

paths:
  "/auth/register":
    post:
      tags: [Auth]
      description: This route will create a new user and store it database
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Example Name
                email:
                  type: string
                  format: email
                  example: example@gmail.com
                password:
                  type: string
                  format: password
                  example: pass1234
                role:
                  type: string
                  enum: ["user", "owner", "admin"]
                  default: "user"
                status:
                  type: string
                  enum: ["pending", "approved", "blocked"]
                  default: pending
              required: [name, email, password]

      responses:
        "201":
          description: Register
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: User Created Successfully
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /auth/register
                      login:
                        type: string
                        example: /auth/login
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  "/auth/login":
    post:
      tags: [Auth]
      description: Login
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: example@gmail.com
                password:
                  type: string
                  format: password
                  example: pass1234
      responses:
        "200":
          description: Login successful
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Login successfull
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /auth/login
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  "/auth/forget_password":
    post:
      description: This route will work while user forget his/her password
      tags: [Auth]
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: example@gmail.com
              required: [email]
      responses:
        '200':
          description: success responses
          content:
            'application/json':
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: We have sent an email to your email check the email and change your password
                  links:
                    type: object
                    properties:
                      self: 
                        type: string
                        example: http://localhost:8000/api/v1/auth/forget_password
                      login:
                        type: string
                        example: http://localhost:8000/api/v1/auth/login
                      register:
                        type: string
                        example: http://localhost:8000/api/v1/auth/register
        '400':
          $ref: '#/components/responses/400'         
        '404':
          $ref: '#/components/responses/404'  
  "/auth/change_password":
    post:
      description: An existing user can change his/her password using this route.
      tags: [Auth]
      security: 
        - bearerAuth: []
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                email: 
                  type: string
                  format: email
                  example: example@gmail.com
                currentPassword:
                  type: string
                  example: pass1234
                newPassword:
                  type: string
                  example: 1234password
              required: [email,currentPassword,newPassword]
      responses:
        '200':
          description: Your password has been updated
          content:
            'application/json':
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: success
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: http://localhost:8000/api/v1/auth/change_password
                      login:
                        type: string
                        example: http://localhost:8000/api/v1/auth/login
                      register:
                        type: string
                        example: http://localhost:8000/api/v1/auth/register
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'     
  "/users":
    get:
      security:
        - bearerAuth: []
      description: Get all existing User
      tags: [User]
      parameters:
        - in: query
          name: sortBy
          description: Sort Key
          schema:
            type: string
            example: updatedAt
        - in: query
          name: sortType
          description: Sort type (asc or dsc)
          schema:
            type: string
            example: dsc
        - in: query
          name: role
          description: filter User by role
          schema:
            type: string
            enum: ["", "user", "owner", "admin"]
            default: ""
        - in: query
          description: filter user by ther status
          name: status
          schema:
            type: string
            enum: ["", "pending", "approved", "blocked"]
            default: ""
        - in: query
          description: Search
          name: search
          schema:
            type: string
            example: ""
      responses:
        "200":
          description: success
          content:
            "applicaiton/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/user"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /users?query
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
  "/users/{id}":
    get:
      security:
        - bearerAuth: []
      tags: [User]
      description: Get a single user
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "200":
          description: success
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: success
                  data:
                    allOf:
                      - $ref: "#/components/schemas/user"
                      - type: object
                        properties:
                          booking:
                            type: array
                            items:
                              $ref: "#/components/schemas/booking"
                      - $ref: "#/components/schemas/timeStamp"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    put:
      security:
        - bearerAuth: []
      description: update an existing user using put
      tags: [User]
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                _id:
                  type: string
                  example: 1
                name:
                  type: string
                  example: Example Name
                avatar:
                  type: string
                  example: https:s3.aws.com/busBooking/avater.jpg
                phone:
                  type: string
                  example: +8801722643906
                role:
                  type: string
                  example: user
                status:
                  type: string
                  example: pending

      responses:
        "200":
          description: update success
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: User update successful
                  data:
                    $ref: "#/components/schemas/user"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "/users/1"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
    patch:
      description: update an existing user's properties
      tags: [User]
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                propertiesName:
                  type: string
                  example: value
      responses:
        "200":
          description: User's properties update successfully
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: User's properties update successfully
                  data:
                    $ref: "#/components/schemas/user"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "/users/1"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
    delete:
      description: This route will delete an user permanently
      tags: [User]
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "204":
          description: Delete an Item
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 204
                  message:
                    type: string
                    example: Item delete successfully
        "404":
          $ref: "#/components/responses/404"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
  "/buses":
    get:
      description: Get all buses base on your query
      tags: [Bus]
      parameters:
        - $ref: "#/components/parameters/locationQuery"
        - $ref: "#/components/parameters/journeyDateQuery"
      responses:
        "200":
          description: This API return a list of buses base on user query
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/bus"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /buses?query
                      seat:
                        type: string
                        example: /buses/1/seats
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/404"
    post:
      description: Create a new Bus
      tags: [Bus]
      security:
        - bearerAuth: []
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Orin
                busNumber:
                  type: string
                  example: Dhaka Kha 223454
                image:
                  type: string
                  example: https://aws.s3.com/bus-booking/orie.jpg
                seatImage:
                  type: array
                  items:
                     type: string
                     example: https://aws.s3.com/bus-booking/seat1.jpg
                isAc:
                  type: boolean
                  enum: [true, false]
                  default: false
                price:
                  type: integer
                  format: int32
                  example: 500
                ownerID:
                  type: string
                  example: 1
                seatClass:
                  type: string
                  enum: ["ecnomic", "business", "first class"]
                  default: ecnomic
                seatPatten:
                  type: string
                  enum: [2:2,1:2]
                  default: 2:2
                seatQtn:
                  type: integer
                  format: int32
                  example: 16
              required: [name,isAc,price,busNumber,ownerID,seatQtn,seatPatten]
                
                  
                  
      responses:
        "201":
          description: bus created successfully
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Success
                  date:
                    $ref: "#/components/schemas/bus"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "/buses/1"
                      seat:
                        type: string
                        example: "/buses/1/seats"
                      stopes:
                        type: string
                        example: /buses/1/busStopes
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
  "/buses/{id}":
    get:
      description: Get a single bus by busId
      tags: [Bus]
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "200":
          description: success
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Success
                  data:
                    allOf:
                      - $ref: "#/components/schemas/bus"
                      
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "/buses/1"
                      seat:
                        type: string
                        example: "/buses/1/seats"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/404"
    put:
      description: This API will update a hole bus information only admin or bus owner can update their bus
      tags: [Bus]
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Orin
                busNumber:
                  type: string
                  example: Dhaka Kha 223456
                image:
                  type: string
                  example: https://aws.s3.com/bus-booking/orie.jpg
                seatImage:
                  type: array
                  items:
                    type: string
                    example: https://aws.s3.com/bus-booking/seat1.jpg
                isAc:
                  type: boolean
                  example: false
                seatQtn:
                  type: integer
                  format: int32
                  example: 28
                price:
                  type: integer
                  format: int32
                  example: 500
                seatClass:
                  type: string
                  enum: ["ecnomic", "business", "first class"]
                  default: ecnomic
                seatPatten:
                  type: string
                  enum: [2:2,1:2]
                  default: 2:2
              required: [name,busNumber,image,isAc,seatQtn,price]
                
      responses:
        "200":
          description: "update successful"
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: update successful
                  data:
                    $ref: "#/components/schemas/bus"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "/buses/1"
                      seat:
                        type: string
                        example: "/buses/1/seats"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    patch:
      description: Update a single properties
      tags: [Bus]
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Orin
                busNumber:
                  type: string
                  example: Dhaka Kha 223456
                image:
                  type: string
                  example: https://aws.s3.com/bus-booking/orie.jpg
                seatImage:
                  type: array
                  items:
                    type: string
                    example: https
                isAc:
                  type: boolean
                  example: false
                seatPatten:
                  type: string
                  enum:
                    - 2:2
                    - 1:2
                  default: 2:2
                seatQtn:
                  type: integer
                  format: int32
                  example: 28
                price:
                  type: integer
                  format: int32
                  example: 500
                seatClass:
                  type: string
                  enum: ["ecnomic", "business", "first class"]
                  default: ecnomic
      responses:
        "200":
          description: Update a single propertie
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: update success
                  data:
                    $ref: "#/components/schemas/bus"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "/buses/1"
                      seat:
                        type: string
                        example: "/buses/1/seat"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    delete:
      description: Delete a bus only for bus owner and admin
      tags: [Bus]
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "204":
          description: delete succes
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 204
                  message:
                    type: string
                    example: Resource Delete Successfully
        "404":
          $ref: "#/components/responses/404"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
  "/bookings":
    get:
      description: Get all booking base on user role
      tags: [Booking]
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/sortBy"
        - $ref: "#/components/parameters/sortKey"
        - $ref: "#/components/parameters/status"
        - $ref: "#/components/parameters/search"
      responses:
        "200":
          description: success
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: success
                  data:
                    allOf:
                      - $ref: "#/components/schemas/booking"
                      - $ref: "#/components/schemas/timeStamp"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /bookings?query
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
    post:
      description: booked a bus's seat
      tags: [Booking]
      security:
        - bearerAuth: []

      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                date:
                  type: string
                  format: date-time
                to:
                  type: string
                  example: Dhaka
                from:
                  type: string
                  example: Gaibandh
                seat:
                  type: string
                  example: A1
                busId:
                  type: string
                  example: 1

      responses:
        "201":
          description: Successfully booked a seat
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Congratulation!! You have Booked a seat.
                  data:
                    $ref: "#/components/schemas/booking"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "/bookings/1"
                      bus:
                        type: string
                        example: "/bookings/1/buses"
                      seat:
                        type: string
                        example: "/bookings/1/seats"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  "/bookings/{id}":
    get:
      description: Get an single booking base on booking id
      tags: [Booking]
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "200":
          description: get single booking
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Success
                  data:
                    $ref: "#/components/schemas/booking"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "/booking/1"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
    put:
      description: update a hole booking
      tags: [Booking]
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/bookingBody"
      responses:
        "200":
          description: update success
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: success
                  data:
                    $ref: "#/components/schemas/booking"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "/bookings/1"
                      bus:
                        type: string
                        example: "/bookings/1/buses"
                      seat:
                        type: string
                        example: "/bookings/1/seats"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
    patch:
      description: update a single or multiple value of a booking
      tags: [Booking]
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/bookingBody"
      responses:
        "200":
          description: success
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Update success
                  data:
                    $ref: "#/components/schemas/booking"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "/bookings/1"
                      bus:
                        type: string
                        example: /bookings/1/buses
                      seat:
                        type: string
                        example: /bookings/1/seats
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
    delete:
      description: Delete a booking
      tags: [Booking]
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "204":
          description: Delete an Items from booking collection
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 204
                  message:
                    type: string
                    example: You have delete a booking successfully
  "/reviews": 
    post:
      security:
        - bearerAuth: []
      tags:
        - Review
      description: Create a review
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: Your valuable review
                rating: 
                  type: number
                  example: 4.5
                busID:
                  type: string
                  example: bus123
                userID:
                  type: string
                  example: user123
                bookingID:  
                  type: string
                  example: booking123
              required: [message,rating,busID,userID,bookingID]
      responses:
        '201':
          description: this endpoing will ensure the review is success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/review'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    get:
      description: Get all reviews
      tags: [Review]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: success responses
          content:
            'application/json':
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/review'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: http://localhost:8000/api/v1/reviews
                      bus: 
                        type: string
                        example: http://localhost:8000/api/v1/reviews/busID
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'               
  "/reviews/{id}":
    get:
      description: Get a single reviews base on reviewID
      tags:
        - Review
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '200':
          description: success responses
          content:
            'application/json':
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: Success
                  data:
                    $ref: '#/components/schemas/review'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                      bus:
                        type: string
    put:
      description: Update a reviews is exist or create a new one
      security:
        - bearerAuth: []
      tags:
        - Review
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                "review":
                  type: string
                  example: review body
                rating:
                  type: number
                  example: 4.5
                userID:
                  type: string
                  example: 1
                busID:
                  type: string
                  example: 1
                bookingID:
                  type: string
                  example: 1
      responses:
        '200':
          description: success responses
          content:
            'application/json':
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/review'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                      bus:
                        type: string
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'                     
    patch:
      description: Update a review's properties
      tags:
        - Review
      security:
        - bearerAuth: []
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                "review":
                  type: string
                  example: your review body
                rating:
                  type: string
                  example: 4.5
                status:
                  type: string
                  enum:
                    - published
                    - blocked
                    - draft
      responses:
        '200':
          description: success responses
          content:
            'application/json':
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/review'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                      bus:
                        type: string          
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      description: It will delete a review
      tags:
        - Review
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '200':
          description: Review delete success responses
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Items deleted  
  '/busStopes':
    post:
      description: Create busStopes for a bus
      tags:
        - Stopes
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                busID:
                  type: string
                  example: bus123
                data:
                  type: string
                  format: date
                  example: 2024-07-04
                sheft:
                  type: string
                  enum: [day,night]
                  default: day
                stopes:
                  type: array
                  items:
                    $ref: '#/components/schemas/stopes'
              required: [busID,date,sheft,stopes]
      responses:
        '201':
          description: Success responses
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: Successful
                  data:
                    $ref: '#/components/schemas/busStopes'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /busStopes/123
                      bus:
                        type: string
                        example: /buses/123                 
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    get:
      description: Get bus stopes base on busID 
      tags:
        - Stopes
      security:
        - bearerAuth: []
      parameters: 
        - in: path
          name: busID
          required: true
          description: Provide a Bus ID
          schema:
            type: string
            example: 123
      responses:
        '200':
          description: success responses
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/busStopes'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /busStopes/123
                      bus:
                        type: string
                        example: /buses/123
  '/busStopes/{id}':
    put:
      tags:
        - Stopes
      security:
        - bearerAuth: []
      description: Update a stopes or create a new one
      parameters:
        - in: path
          name: busID
          description: Provide busId whice bus you want to update.
          required: true
          schema:
            type: string
            example: 1234
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              properties:
                data:
                  type: string
                  format: date
                  example: 2024-07-04
                sheft:
                  type: string
                  enum:
                    - day
                    - night
                  default: day
                stopes:
                  type: array
                  items:
                    $ref: '#/components/schemas/stopes'
      responses:
        '200':
          description: success responses
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/busStopes'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: '/busStopes/123'
                      bus:
                        type: string
                        example: /buses/123
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'    
    patch:
      description: update a bus stopes property using patch.
      tags:
        - Stopes
      security:
        - bearerAuth: []
      
      parameters:
        - in: path
          name: stopesID
          required: true
          schema:
            type: string
            example: 1234
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  format: date
                  example: 2024-07-04
                sheft:
                  type: string
                  enum: ['day','night']
                  default: day
                stopes:
                  type: array
                  items:
                    $ref: '#/components/schemas/stopes'
      responses:
        '200':
          description: success responses
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully updated
                  data:
                    $ref: '#/components/schemas/busStopes'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: '/busStopes/123'
                      bus:
                        type: string
                        example: /buses/123
                  
      
    delete:
      description: delete a bus stopes
      tags:
        - Stopes
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: stopesID
          description: Provide stopes Id to delete a bus stopes.
          required: true
          schema: 
            type: string
            example: 123
      responses:
        '200':
          description: success responses
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: successfully delete.
        '400':
          $ref: '#/components/responses/400'
        "403":
          $ref: '#/components/responses/403'  
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'


# All components are here

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    "timeStamp":
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [updatedAt, createdAt]
    "bus":
      allOf:
        - type: object
          properties:
            _id:
              type: string
              example: 1
            name:
              type: string
              example: Orin
            busNumber:
              type: string
              example: Dhaka Kha 223453
            image: 
              type: string
              example: https://aws.s3.com/bus-booking/orie.jpg
            seatImage:
              type: array
              items:
                type: string
                example: https://aws.s3.com/bus-booking/seat1.jpg 
            isAc:
              type: boolean
              example: false
            rating:
              type: integer
              format: int32
              example: 4.5
            active:
              type: boolean
              default: false
            seatQtn:
              type: integer
              format: int32
              example: 28
            seatClass:
              type: string
              example: economic
        - $ref: "#/components/schemas/timeStamp"
    "stopes":
      type: object
      properties:
        location:
          type: string
          example: Gaibandha
        date:
          type: string
          format: date
        start:
          type: boolean
          example: true
        finish:
          type: boolean
          example: false
    "seats":
      allOf:
        - type: object
          properties:
            _id:
              type: string
              example: 1
            busId:
              type: string
              example: 1
            seat:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: A1
                  isBooked:
                    type: boolean
                    example: false
                  booking:
                    type: object
                    properties:
                      userId:
                        type: string
                        example: 1
                      date:
                        type: string
                        format: date-time

          required: [_id, busId, seat]
        - $ref: "#/components/schemas/timeStamp"
    "review":
      type: object
      allOf:
        - properties:
            _id: 
              type: string
              example: 123
            message:
              type: string
              example: Your Review will here
            rating:
              type: number
              example: 4.5
            busID:
              type: string
              example: bus12
            bookingID:
              type: string
              example: booking123
            userID:
              type: string
              example: user1
            status:
              type: string
              enum: ['published','blocked']
              example: published
        - $ref: '#/components/schemas/timeStamp'  
    "user":
      allOf:
        - type: object
          properties:
            _id:
              type: string
              example: 1
            name:
              type: string
              example: Example User
            email:
              type: string
              format: email
              example: example@gmail.com
            phone:
              type: string
              example: +8801722643906
            avater:
              type: string
              example: https://aws.s3.com/bus-booking/avater.jpg
            role:
              type: string
              example: user
            status:
              type: string
              example: pending
          required: [_id, name, email]
        - $ref: "#/components/schemas/timeStamp"
    "booking":
      allOf:
        - type: object
          properties:
            _id:
              type: string
              example: 1
            journeyDate:
              type: string
              format: date-time
            seat:
              type: string
              example: A1
            to:
              type: string
              example: Dhaka
            from:
              type: string
              example: Rangpur
            busId:
              type: string
              example: 1
            status:
              type: string
              enum: ["pending", "approved", "completed"]
              default: pending
            userId:
              type: string
              example: 1
          required:
            [
              _id,
              bookingDate,
              journeyDate,
              seat,
              busId,
              userId,
              location,
              pickup,
              status,
            ]
        - $ref: "#/components/schemas/timeStamp"
    'busStopes':
      allOf:
        - type: object
          properties:
            _id:
              type: string
              example: 123
            busID:
              type: string
              example: busID123
            data:
              type: string
              format: date
              example: 2024-07-04
            sheft:
              type: string
              enum: [day,night]
              default: day
            stopes:
              type: array
              items:
                $ref: '#/components/schemas/stopes'
                

        - $ref: '#/components/schemas/timeStamp'
    "bookingBody":
      type: object
      properties:
        date:
          type: string
          format: date-time
        to:
          type: string
          example: Gaibandh
        from:
          type: string
          example: Dhaka
        seat:
          type: string
          example: A1
        busId:  
          type: string
          example: 1
        status:
          type: string
          enum: ["pending", "approved", "completed"]
          default: pending
      required: [date,to,from,seat,busId]
  responses:
    "400":
      description: Bad request
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 400
              error:
                type: string
                example: Bad Request
              message:
                type: string
                example: Serve can not process the request
    "404":
      description: Not found
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 404
              error:
                type: integer
                example: Not Found
              message:
                type: string
                example: Requested Resource Not Found
    "401":
      description: Unauthenticated
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 401
              error:
                type: string
                example: Unauthenticated
              message:
                type: string
                example: Invalied credentials
    "403":
      description: Unauthorized
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 403
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: You don't have the right permission
    "409":
      description: Confilict
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 409
              error:
                type: string
                example: Conflict
              message:
                type: string
                example: Your request not possible at this time
    "500":
      description: Server Error
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 500
              error:
                type: string
                example: Internal Server error
              message:
                type: string
                example: We are sorry for the inconvenient
  parameters:
    idPathParam:
      in: path
      name: id
      description: Reqources Id
      required: true
      schema:
        type: string
        example: 1
    locationQuery:
      in: query
      name: location
      description: Your location
      required: false
      schema:
        type: string
        example: Dhaka

    journeyDateQuery:
      in: query
      name: date
      description: Your journey date
      required: false
      schema:
        type: string
        format: date
        example: 2024-07-04

    sortBy:
      in: query
      name: sortBy
      description: sort by asc or des order
      required: false
      schema:
        type: string
        enum: ["asc", "dsc"]
        default: dsc
    sortKey:
      in: query
      name: sortKey
      description: select your sort key
      required: false
      schema:
        type: string
        enum: ["createdAt", "updatedAt"]
        default: createdAt
    status:
      in: query
      name: status
      description: Filter out by resources status
      schema:
        type: string
        enum: ["pending", "approved", "completed"]
        default: pending
    role:
      in: query
      name: role
      description: sort user by their role
      required: false
      schema:
        type: string
        enum: ["user", "admin", "owner"]
        default: user
    search:
      in: query
      name: search
      description: search your resource by search
      schema:
        type: string
        example: ""
